
ContadorCC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000166  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000725  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000671  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028e  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000161d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint8_t cont_unidad = 0;
uint8_t cont_decena = 0;

int main(void)
{
    DDRB = 0x00;									// puerto B como salida
  90:	14 b8       	out	0x04, r1	; 4
	PORTB = 0x00;									// apagar todo el puerto B
  92:	15 b8       	out	0x05, r1	; 5
	cont_unidad = 0;								// inicio el contador en 0
  94:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <cont_unidad>
	cont_decena = 0;								// inicio el contador en 0
  98:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		else if (cont_unidad > 9){
			cont_unidad = 0;
			cont_decena++;							
			while(cont_decena == 6){
				PORTB = 0xFF;
  9c:	9f ef       	ldi	r25, 0xFF	; 255
	cont_unidad = 0;								// inicio el contador en 0
	cont_decena = 0;								// inicio el contador en 0
	
    while (1) 
    {
		if(cont_unidad <= 9){
  9e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cont_unidad>
  a2:	8a 30       	cpi	r24, 0x0A	; 10
  a4:	a8 f4       	brcc	.+42     	; 0xd0 <main+0x40>
			cont_unidad++;
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cont_unidad>
			PORTB = cont_unidad | (cont_decena << 4);					// los 4 primeros bits son unidad
  ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  b0:	40 e1       	ldi	r20, 0x10	; 16
  b2:	24 9f       	mul	r18, r20
  b4:	90 01       	movw	r18, r0
  b6:	11 24       	eor	r1, r1
  b8:	82 2b       	or	r24, r18
  ba:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	2d e0       	ldi	r18, 0x0D	; 13
  c0:	33 e0       	ldi	r19, 0x03	; 3
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	20 40       	sbci	r18, 0x00	; 0
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x32>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3c>
  cc:	00 00       	nop
  ce:	e7 cf       	rjmp	.-50     	; 0x9e <main+0xe>
			_delay_ms(1000);
		}
		else if (cont_unidad > 9){
			cont_unidad = 0;
  d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <cont_unidad>
			cont_decena++;							
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			while(cont_decena == 6){
  de:	86 30       	cpi	r24, 0x06	; 6
  e0:	f1 f6       	brne	.-68     	; 0x9e <main+0xe>
				PORTB = 0xFF;
  e2:	95 b9       	out	0x05, r25	; 5
			_delay_ms(1000);
		}
		else if (cont_unidad > 9){
			cont_unidad = 0;
			cont_decena++;							
			while(cont_decena == 6){
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e8:	86 30       	cpi	r24, 0x06	; 6
  ea:	d9 f3       	breq	.-10     	; 0xe2 <main+0x52>
  ec:	d8 cf       	rjmp	.-80     	; 0x9e <main+0xe>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
