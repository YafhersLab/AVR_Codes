
Semaforo_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007be  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000682  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fe  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000382  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int flag = 0;

int main(void)
{
    DDRB = 0xFF;				//puerto B como salida
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;				//puerto C como salida
  94:	87 b9       	out	0x07, r24	; 7
	PORTB = 0x00;				//apago el puerto B
  96:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;				//apago el puerto C
  98:	18 b8       	out	0x08, r1	; 8
		_delay_ms(1000);
		flag = 3;
	}
	//cuarto estado
	else if(flag == 3){
		PORTB = (1<<1);			//encender el amarillo
  9a:	62 e0       	ldi	r22, 0x02	; 2
		PORTC = (1<<0);			//encender el rojo
  9c:	21 e0       	ldi	r18, 0x01	; 1
		_delay_ms(300);
		flag = 2;
	}
	//tercer estado
	else if(flag == 2){
		PORTB = (1<<2);			//encender el verde
  9e:	34 e0       	ldi	r19, 0x04	; 4
		PORTC = (1<<0);			//encender el rojo
		_delay_ms(1000);
		flag = 3;
  a0:	a3 e0       	ldi	r26, 0x03	; 3
  a2:	b0 e0       	ldi	r27, 0x00	; 0
	//segundo estado
	else if(flag == 1){
		PORTB = (1<<0);			//encender el rojo
		PORTC = (1<<1);			//encender el amarillo
		_delay_ms(300);
		flag = 2;
  a4:	e2 e0       	ldi	r30, 0x02	; 2
  a6:	f0 e0       	ldi	r31, 0x00	; 0
	//primer estado
	if(flag == 0){
		PORTB = (1<<0);			//encender el rojo
		PORTC = (1<<2);			//encender el verde
		_delay_ms(1000);
		flag = 1;
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	50 e0       	ldi	r21, 0x00	; 0
	PORTC = 0x00;				//apago el puerto C
	
    while (1) 
    {
	//primer estado
	if(flag == 0){
  ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	81 f4       	brne	.+32     	; 0xd8 <main+0x48>
		PORTB = (1<<0);			//encender el rojo
  b8:	25 b9       	out	0x05, r18	; 5
		PORTC = (1<<2);			//encender el verde
  ba:	38 b9       	out	0x08, r19	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	7f e3       	ldi	r23, 0x3F	; 63
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	93 e0       	ldi	r25, 0x03	; 3
  c2:	71 50       	subi	r23, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x32>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3c>
  cc:	00 00       	nop
		_delay_ms(1000);
		flag = 1;
  ce:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <_edata+0x1>
  d2:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
  d6:	ea cf       	rjmp	.-44     	; 0xac <main+0x1c>
	}
	//segundo estado
	else if(flag == 1){
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 05       	cpc	r25, r1
  dc:	81 f4       	brne	.+32     	; 0xfe <main+0x6e>
		PORTB = (1<<0);			//encender el rojo
  de:	25 b9       	out	0x05, r18	; 5
		PORTC = (1<<1);			//encender el amarillo
  e0:	68 b9       	out	0x08, r22	; 8
  e2:	7f e5       	ldi	r23, 0x5F	; 95
  e4:	8a ee       	ldi	r24, 0xEA	; 234
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	71 50       	subi	r23, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x58>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x62>
  f2:	00 00       	nop
		_delay_ms(300);
		flag = 2;
  f4:	f0 93 01 01 	sts	0x0101, r31	; 0x800101 <_edata+0x1>
  f8:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <_edata>
  fc:	d7 cf       	rjmp	.-82     	; 0xac <main+0x1c>
	}
	//tercer estado
	else if(flag == 2){
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	91 05       	cpc	r25, r1
 102:	81 f4       	brne	.+32     	; 0x124 <main+0x94>
		PORTB = (1<<2);			//encender el verde
 104:	35 b9       	out	0x05, r19	; 5
		PORTC = (1<<0);			//encender el rojo
 106:	28 b9       	out	0x08, r18	; 8
 108:	7f e3       	ldi	r23, 0x3F	; 63
 10a:	8d e0       	ldi	r24, 0x0D	; 13
 10c:	93 e0       	ldi	r25, 0x03	; 3
 10e:	71 50       	subi	r23, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x7e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x88>
 118:	00 00       	nop
		_delay_ms(1000);
		flag = 3;
 11a:	b0 93 01 01 	sts	0x0101, r27	; 0x800101 <_edata+0x1>
 11e:	a0 93 00 01 	sts	0x0100, r26	; 0x800100 <_edata>
 122:	c4 cf       	rjmp	.-120    	; 0xac <main+0x1c>
	}
	//cuarto estado
	else if(flag == 3){
 124:	03 97       	sbiw	r24, 0x03	; 3
 126:	11 f6       	brne	.-124    	; 0xac <main+0x1c>
		PORTB = (1<<1);			//encender el amarillo
 128:	65 b9       	out	0x05, r22	; 5
		PORTC = (1<<0);			//encender el rojo
 12a:	28 b9       	out	0x08, r18	; 8
 12c:	7f e5       	ldi	r23, 0x5F	; 95
 12e:	8a ee       	ldi	r24, 0xEA	; 234
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	71 50       	subi	r23, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0xa2>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0xac>
 13c:	00 00       	nop
		_delay_ms(300);
		flag = 0;
 13e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 146:	b2 cf       	rjmp	.-156    	; 0xac <main+0x1c>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
